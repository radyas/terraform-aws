name: 'Terraform Test Deployment'

on:
  push:
    branches: [dev]

env:
  TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
  TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  PORT: 22

jobs:
  terratest:
    name: 'TerraTest'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: test

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Run TerraTest
      run: go test -v

  terraform:
    needs: terratest
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: deployment

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var-file="dev.tfvars" -out="plan"

    - name: Terraform Apply
      run: terraform apply -auto-approve "plan"

    - name: Output server url
      run: |
        echo "SERVER_URL=$(terraform output server_url)" >> $GITHUB_ENV

    - name: executing remote ssh commands
      working-directory: remote
      run: |
        echo "$PRIVATE_KEY" > private.pem && chmod 600 private.pem
        chmod u+r+x private.pem
        ./script.sh ${{ env.SERVER_URL }} ${{ env.TF_VAR_aws_access_key }} ${{ env.TF_VAR_aws_secret_key }}

    - name: run validation
      working-directory: remote
      run: python3 app.py

    - name: Terraform Cleanup
      run: |
        terraform plan -var-file="dev.tfvars" -destroy -out="plan"
        terraform apply "plan"
